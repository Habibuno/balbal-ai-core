---
services:
  supabase-studio:
    container_name: supabase-studio
    image: supabase/studio:20250113-83c9420
    restart: unless-stopped
    healthcheck:
      test: [
          'CMD',
          'node',
          '-e',
          "fetch('http://supabase-studio:3000/api/profile').then((r) => {if
          (r.status !== 200) throw new Error(r.status)})",
        ]
      timeout: 10s
      interval: 5s
      retries: 3
    environment:
      STUDIO_PG_META_URL: http://supabase-meta:8080
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?error}
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      AUTH_JWT_SECRET: ${JWT_SECRET:?error}

      DEFAULT_ORGANIZATION_NAME: ${STUDIO_DEFAULT_ORGANIZATION:?error}
      DEFAULT_PROJECT_NAME: ${STUDIO_DEFAULT_PROJECT:?error}

      SUPABASE_URL: ${SUPABASE_URL:?error}
      SUPABASE_PUBLIC_URL: ${SUPABASE_PUBLIC_URL:?error}
      SUPABASE_ANON_KEY: ${ANON_KEY:?error}
      SUPABASE_SERVICE_KEY: ${SERVICE_ROLE_KEY:?error}

      LOGFLARE_API_KEY: ${LOGFLARE_API_KEY:?error}
      LOGFLARE_URL: ${LOGFLARE_URL:?error}

      NEXT_PUBLIC_ENABLE_LOGS: 'true'
      NEXT_ANALYTICS_BACKEND_PROVIDER: postgres
    ports:
      - ${STUDIO_PORT}:3000
    networks:
      - network_backend

  supabase-kong:
    container_name: supabase-kong
    image: kong:2.8.1
    restart: unless-stopped
    depends_on:
      supabase-analytics:
        condition: service_healthy
    environment:
      KONG_DATABASE: 'off'
      KONG_DECLARATIVE_CONFIG: /home/kong/kong.yml
      KONG_DNS_ORDER: LAST,A,CNAME
      KONG_PLUGINS: request-transformer,cors,key-auth,acl,basic-auth
      KONG_NGINX_PROXY_PROXY_BUFFER_SIZE: 160k
      KONG_NGINX_PROXY_PROXY_BUFFERS: 64 160k

      CORS_ORIGIN_SUPABASE_STUDIO: http://supabase-studio:3000
      CORS_ORIGIN_SUPABASE_KONG: http://supabase-kong:8000

      SUPABASE_ANON_KEY: ${ANON_KEY}
      SUPABASE_SERVICE_KEY: ${SERVICE_ROLE_KEY}

      DASHBOARD_USERNAME: ${DASHBOARD_USERNAME}
      DASHBOARD_PASSWORD: ${DASHBOARD_PASSWORD}
    entrypoint: bash -c 'eval "echo \"$$(cat ~/temp.yml)\"" > ~/kong.yml &&
      /docker-entrypoint.sh kong docker-start'
    ports:
      - '${KONG_HTTP_PORT}:8000/tcp'
      - '${KONG_HTTPS_PORT}:8443/tcp'
    volumes:
      - ./.docker/volumes/api/kong.yml:/home/kong/temp.yml:ro
    networks:
      - network_backend

  supabase-auth:
    container_name: supabase-auth
    image: supabase/gotrue:v2.167.0
    restart: unless-stopped
    healthcheck:
      test:
        [
          'CMD',
          'wget',
          '--no-verbose',
          '--tries=1',
          '--spider',
          'http://localhost:9999/health',
        ]
      timeout: 5s
      interval: 5s
      retries: 3
    depends_on:
      supabase-analytics:
        condition: service_healthy
    environment:
      GOTRUE_API_HOST: 0.0.0.0
      GOTRUE_API_PORT: 9999
      API_EXTERNAL_URL: ${API_EXTERNAL_URL}

      GOTRUE_DB_DRIVER: postgres
      GOTRUE_DB_DATABASE_URL: postgres://supabase_auth_admin:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}

      GOTRUE_SITE_URL: ${SITE_URL}
      GOTRUE_URI_ALLOW_LIST: ${ADDITIONAL_REDIRECT_URLS}
      GOTRUE_DISABLE_SIGNUP: ${DISABLE_SIGNUP}

      GOTRUE_JWT_ADMIN_ROLES: service_role
      GOTRUE_JWT_AUD: authenticated
      GOTRUE_JWT_DEFAULT_GROUP_NAME: authenticated
      GOTRUE_JWT_EXP: ${JWT_EXPIRY}
      GOTRUE_JWT_SECRET: ${JWT_SECRET}

      GOTRUE_EXTERNAL_EMAIL_ENABLED: ${ENABLE_EMAIL_SIGNUP}
      GOTRUE_EXTERNAL_ANONYMOUS_USERS_ENABLED: ${ENABLE_ANONYMOUS_USERS}
      GOTRUE_MAILER_AUTOCONFIRM: ${ENABLE_EMAIL_AUTOCONFIRM}

      GOTRUE_SMTP_ADMIN_EMAIL: ${SMTP_ADMIN_EMAIL}
      GOTRUE_SMTP_HOST: ${SMTP_HOST}
      GOTRUE_SMTP_PORT: ${SMTP_PORT}
      GOTRUE_SMTP_USER: ${SMTP_USER}
      GOTRUE_SMTP_PASS: ${SMTP_PASS}
      GOTRUE_SMTP_SENDER_NAME: ${SMTP_SENDER_NAME}

      GOTRUE_MAILER_URLPATHS_INVITE: ${MAILER_URLPATHS_INVITE}
      GOTRUE_MAILER_URLPATHS_CONFIRMATION: ${MAILER_URLPATHS_CONFIRMATION}
      GOTRUE_MAILER_URLPATHS_RECOVERY: ${MAILER_URLPATHS_RECOVERY}
      GOTRUE_MAILER_URLPATHS_EMAIL_CHANGE: ${MAILER_URLPATHS_EMAIL_CHANGE}

      GOTRUE_EXTERNAL_PHONE_ENABLED: ${ENABLE_PHONE_SIGNUP}
      GOTRUE_SMS_AUTOCONFIRM: ${ENABLE_PHONE_AUTOCONFIRM}

      GOTRUE_EXTERNAL_GOOGLE_ENABLED: ${PROVIDER_GOOGLE_ENABLED:?error}
      GOTRUE_EXTERNAL_GOOGLE_CLIENT_ID: ${PROVIDER_GOOGLE_CLIENT_ID?:error}
      GOTRUE_EXTERNAL_GOOGLE_SECRET: ${PROVIDER_GOOGLE_SECRET?:error}
      GOTRUE_EXTERNAL_GOOGLE_REDIRECT_URI: ${PROVIDER_GOOGLE_REDIRECT_URI?:error}
      GOTRUE_EXTERNAL_GOOGLE_SKIP_NONCE_CHECK: 'true'

      GOTRUE_EXTERNAL_APPLE_ENABLED: ${PROVIDER_APPLE_ENABLED:?error}
      GOTRUE_EXTERNAL_APPLE_CLIENT_ID: ${PROVIDER_APPLE_CLIENT_ID?:error}
      GOTRUE_EXTERNAL_APPLE_SECRET: ${PROVIDER_APPLE_SECRET?:error}
      GOTRUE_EXTERNAL_APPLE_REDIRECT_URI: ${PROVIDER_APPLE_REDIRECT_URI?:error}
      GOTRUE_EXTERNAL_APPLE_SKIP_NONCE_CHECK: 'true'
    networks:
      - network_backend

  supabase-rest:
    container_name: supabase-rest
    image: postgrest/postgrest:v12.2.0
    restart: unless-stopped
    depends_on:
      supabase-analytics:
        condition: service_healthy
    environment:
      PGRST_DB_URI: postgresql://authenticator:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}
      PGRST_DB_SCHEMAS: ${PGRST_DB_SCHEMAS}
      PGRST_DB_ANON_ROLE: anon
      PGRST_JWT_SECRET: ${JWT_SECRET}
      PGRST_DB_USE_LEGACY_GUCS: 'false'
      PGRST_APP_SETTINGS_JWT_SECRET: ${JWT_SECRET}
      PGRST_APP_SETTINGS_JWT_EXP: ${JWT_EXPIRY}
    command: ['postgrest']
    networks:
      - network_backend

  supabase-realtime:
    container_name: supabase-realtime
    image: supabase/realtime:v2.34.7
    restart: unless-stopped
    depends_on:
      supabase-analytics:
        condition: service_healthy
    healthcheck:
      test:
        [
          'CMD',
          'curl',
          '-sSfL',
          '--head',
          '-o',
          '/dev/null',
          '-H',
          'Authorization: Bearer ${ANON_KEY}',
          'http://localhost:4000/api/tenants/realtime-dev/health',
        ]
      timeout: 5s
      interval: 5s
      retries: 3
    environment:
      PORT: 4000
      DB_HOST: ${POSTGRES_HOST}
      DB_PORT: ${POSTGRES_PORT}
      DB_USER: supabase_admin
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_NAME: ${POSTGRES_DB}
      DB_AFTER_CONNECT_QUERY: 'SET search_path TO _realtime'
      DB_ENC_KEY: supabaserealtime
      API_JWT_SECRET: ${JWT_SECRET}
      SECRET_KEY_BASE: ${SECRET_KEY_BASE}
      ERL_AFLAGS: -proto_dist inet_tcp
      DNS_NODES: "''"
      RLIMIT_NOFILE: '10000'
      APP_NAME: realtime
      SEED_SELF_HOST: 'true'
      RUN_JANITOR: 'true'
    networks:
      - network_backend

  supabase-meta:
    container_name: supabase-meta
    image: supabase/postgres-meta:v0.84.2
    restart: unless-stopped
    depends_on:
      supabase-analytics:
        condition: service_healthy
    environment:
      PG_META_PORT: 8080
      PG_META_DB_HOST: ${POSTGRES_HOST}
      PG_META_DB_PORT: ${POSTGRES_PORT}
      PG_META_DB_NAME: ${POSTGRES_DB}
      PG_META_DB_USER: supabase_admin
      PG_META_DB_PASSWORD: ${POSTGRES_PASSWORD}
    networks:
      - network_backend

  supabase-functions:
    container_name: supabase-edge-functions
    image: supabase/edge-runtime:v1.67.0
    restart: unless-stopped
    volumes:
      - ./.docker/volumes/functions:/home/deno/functions:Z
    depends_on:
      supabase-analytics:
        condition: service_healthy
    environment:
      JWT_SECRET: ${JWT_SECRET}
      SUPABASE_URL: http://kong:8000
      SUPABASE_ANON_KEY: ${ANON_KEY}
      SUPABASE_SERVICE_ROLE_KEY: ${SERVICE_ROLE_KEY}
      SUPABASE_DB_URL: postgres://postgres:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}
      VERIFY_JWT: '${FUNCTIONS_VERIFY_JWT}'
    command: ['start', '--main-service', '/home/deno/functions/main']
    networks:
      - network_backend

  supabase-analytics:
    container_name: supabase-analytics
    image: supabase/logflare:1.4.0
    restart: unless-stopped
    ports:
      - 4000:4000
    healthcheck:
      test: ['CMD', 'curl', 'http://localhost:4000/health']
      timeout: 5s
      interval: 5s
      retries: 10
    environment:
      LOGFLARE_NODE_HOST: 127.0.0.1
      DB_USERNAME: supabase_admin
      DB_DATABASE: _supabase
      DB_HOSTNAME: ${POSTGRES_HOST}
      DB_PORT: ${POSTGRES_PORT}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_SCHEMA: _analytics
      LOGFLARE_API_KEY: ${LOGFLARE_API_KEY}
      LOGFLARE_SINGLE_TENANT: 'true'
      LOGFLARE_SUPABASE_MODE: 'true'
      LOGFLARE_MIN_CLUSTER_SIZE: 1

      POSTGRES_BACKEND_URL: postgresql://supabase_admin:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/_supabase
      POSTGRES_BACKEND_SCHEMA: _analytics
      LOGFLARE_FEATURE_FLAG_OVERRIDE: multibackend='true'
    networks:
      - network_backend

  supabase-vector:
    container_name: supabase-vector
    image: timberio/vector:0.28.1-alpine
    restart: unless-stopped
    volumes:
      - ./.docker/volumes/logs/vector.yml:/etc/vector/vector.yml:ro
      - ${DOCKER_SOCKET_LOCATION}:/var/run/docker.sock:ro
    healthcheck:
      test:
        [
          'CMD',
          'wget',
          '--no-verbose',
          '--tries=1',
          '--spider',
          'http://supabase-vector:9001/health',
        ]
      timeout: 5s
      interval: 5s
      retries: 3
    environment:
      LOGFLARE_API_KEY: ${LOGFLARE_API_KEY}
    command: ['--config', '/etc/vector/vector.yml']
    networks:
      - network_backend

  supabase-supavisor:
    container_name: supabase-pooler
    image: supabase/supavisor:1.1.56
    restart: unless-stopped
    ports:
      - '5433:5433'
      - ${POOLER_PROXY_PORT_TRANSACTION}:6543
    volumes:
      - ./.docker/volumes/pooler/pooler.exs:/etc/pooler/pooler.exs:ro
    healthcheck:
      test:
        [
          'CMD',
          'curl',
          '-sSfL',
          '--head',
          '-o',
          '/dev/null',
          'http://127.0.0.1:4000/api/health',
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      PORT: 4000
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      DATABASE_URL: postgresql://supabase_admin:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/_supabase
      CLUSTER_POSTGRES: 'true'
      SECRET_KEY_BASE: ${SECRET_KEY_BASE}
      VAULT_ENC_KEY: ${VAULT_ENC_KEY}
      API_JWT_SECRET: ${JWT_SECRET}
      METRICS_JWT_SECRET: ${JWT_SECRET}
      REGION: local
      ERL_AFLAGS: -proto_dist inet_tcp
      POOLER_TENANT_ID: ${POOLER_TENANT_ID}
      POOLER_DEFAULT_POOL_SIZE: ${POOLER_DEFAULT_POOL_SIZE}
      POOLER_MAX_CLIENT_CONN: ${POOLER_MAX_CLIENT_CONN}
      POOLER_POOL_MODE: transaction
    command: [
        '/bin/sh',
        '-c',
        '/app/bin/migrate && /app/bin/supavisor eval "$$(cat
        /etc/pooler/pooler.exs)" && /app/bin/server',
      ]
    networks:
      - network_backend

networks:
  network_backend:
    external: true
    name: scca_network_backend
  network_memphis:
    external: true
    name: scca_network_memphis
  network_monitoring:
    external: true
    name: scca_network_monitoring
